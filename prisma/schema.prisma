generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./json"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  user_id           Int                 @id @default(autoincrement())
  user_username     String?             @db.VarChar(255)
  user_password     String?             @db.VarChar(255)
  user_email        String?             @db.VarChar(255)
  user_type         Int?
  user_superuser_id Int?
  user_status       Int?
  user_created_at   DateTime?           @db.DateTime(0)
  user_modified_at  DateTime?           @db.DateTime(0)
  user_modified_by  Int?
  organization      organization[]
  role              role?               @relation(fields: [user_type], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "user_ibfk_1")
  user_group        user_group[]
  user_organization user_organization[]

  @@index([user_type], map: "user_type")
}

model organization {
  org_id            Int                 @id @default(autoincrement())
  org_user_id       Int?
  org_name          String?             @db.VarChar(255)
  org_email         String?             @db.VarChar(255)
  org_status        Int?
  org_created_at    DateTime?           @db.DateTime(0)
  org_modified_at   DateTime?           @db.DateTime(0)
  org_modified_by   Int?
  group             group[]
  user              user?               @relation(fields: [org_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "organization_ibfk_1")
  user_organization user_organization[]

  @@index([org_user_id], map: "org_user_id")
}

model role {
  role_id          Int       @id @default(autoincrement())
  role_name        String?   @db.VarChar(255)
  role_description String?   @db.VarChar(255)
  role_status      Int?
  role_created_at  DateTime? @db.DateTime(0)
  role_modified_at DateTime? @db.DateTime(0)
  role_modified_by Int?
  user             user[]
}

model user_organization {
  uo_id        Int           @id @default(autoincrement())
  uo_user_id   Int?
  uo_org_id    Int?
  uo_status    Int?
  user         user?         @relation(fields: [uo_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_organization_ibfk_1")
  organization organization? @relation(fields: [uo_org_id], references: [org_id], onDelete: Restrict, onUpdate: Restrict, map: "user_organization_ibfk_3")

  @@index([uo_org_id], map: "uo_org_id")
  @@index([uo_user_id], map: "uo_user_id")
}

model group {
  group_id          Int           @id @default(autoincrement())
  group_org_id      Int?
  group_name        String?       @db.VarChar(255)
  group_description String?       @db.VarChar(255)
  group_status      Int?
  group_created_at  DateTime?     @db.DateTime(0)
  group_modified_at DateTime?     @db.DateTime(0)
  group_modified_by Int?
  organization      organization? @relation(fields: [group_org_id], references: [org_id], onDelete: NoAction, onUpdate: NoAction, map: "group_ibfk_1")
  user_group        user_group[]

  @@index([group_org_id], map: "group_org_id")
}

model user_group {
  ug_id          Int       @id @default(autoincrement())
  ug_group_id    Int?
  ug_user_id     Int?
  ug_status      Int?
  ug_created_at  DateTime? @db.DateTime(0)
  ug_modified_at DateTime? @db.DateTime(0)
  ug_modified_by Int?
  group          group?    @relation(fields: [ug_group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction, map: "user_group_ibfk_1")
  user           user?     @relation(fields: [ug_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_group_ibfk_2")

  @@index([ug_group_id], map: "ug_group_id")
  @@index([ug_user_id], map: "ug_user_id")
}
